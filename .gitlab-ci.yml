# Continuous deployment configuration
# See http://doc.gitlab.com/ci/builds_configuration/README.html
stages:
    - build
    - test
    - integration-test
    - release
    - deploy

variables:
    CONTAINER_REGISTRY: "registry.gitlab.com/ferdinand-swoboda"
    APP: "askizzy-frontend"
    CONTAINER_TEST_IMAGE: ${CONTAINER_REGISTRY}/${APP}:${CI_COMMIT_SHA}
    CONTAINER_RELEASE_IMAGE: ${CONTAINER_REGISTRY}/${APP}:${CI_COMMIT_TAG}
    GOOGLE_API_KEY: ${GOOGLE_API_KEY}
    ISS_URL: 0.0.0.0:3000
before_script:
    - docker login -u gitlab-ci-token -p $ACCESS_TOKEN $CONTAINER_REGISTRY

build:
    stage: build
    script:
    - docker build --build-arg GOOGLE_API_KEY=${GOOGLE_API_KEY} --build-arg ISS_URL=${ISS_URL} --pull -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

unit-test:
    stage: test
    variables:
      SELENIUM_BROWSER: phantomjs
    script:
    - docker run -t -e SELENIUM_BROWSER=${SELENIUM_BROWSER} -- ${CONTAINER_TEST_IMAGE} unit-test

release:
    stage: release
    script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker rmi $CONTAINER_TEST_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE
    only:
    - tags

deploy:
    stage: deploy
    before_script:
    - eval $(docker-machine env deployment-target)
    script:
    - export CONTAINER_IMAGE=${CONTAINER_RELEASE_IMAGE}
    - docker stop frontend
    - docker rm frontend
    - docker run -d -p 80:8000 -e GOOGLE_API_KEY="${GOOGLE_API_KEY}" -e ISS_URL=${ISS_URL} --name frontend -- ${CONTAINER_IMAGE} serve
    after_script:
    - eval $(docker-machine env --unset)
    when: manual
    allow_failure: false
    only:
    - tags
