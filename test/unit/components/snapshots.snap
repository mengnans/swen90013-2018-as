// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Unit tests Clap renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Clap
    count={100}
    countTotal={0}
    isClicked={true}
    service={
      Object {
        "catchment": "Carlton",
        "description": "A housing service for people.",
        "eligibility_info": "",
        "emails": Array [],
        "id": 111,
        "ineligibility_info": "",
        "location": Object {
          "point": Object {
            "lat": -37.8228,
            "lon": 144.998,
          },
          "suburb": "Richmond",
        },
        "name": "Housing Service",
        "now_open": Object {
          "now_open": false,
        },
        "opening_hours": Array [],
        "phones": Array [],
        "service_type": Array [
          "Housing Service",
        ],
        "site": Object {
          "id": 111,
          "name": "My Housing Service",
        },
        "web": null,
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <div>
        <h4>
          Clap for This Wonderful Service:
        </h4>
        <br />
        <div
          className="Clap"
        >
          <ThemeProvider
            theme={
              Object {
                "size": 35,
              }
            }
          >
            <styled.button
              id="clap"
              isHover={false}
              onClick={[Function]}
              onMouseEnter={[Function]}
              onMouseLeave={[Function]}
            >
              <SvgIconClap
                className="ColoredIcon"
                id="clap-icon"
                isClicked={undefined}
              />
              <styled.span
                id="clap-count"
              >
                +1
              </styled.span>
              <styled.span
                id="clap-count-total"
              >
                0
              </styled.span>
            </styled.button>
          </ThemeProvider>
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h4>
            Clap for This Wonderful Service:
          </h4>,
          <br />,
          <div
            className="Clap"
          >
            <ThemeProvider
              theme={
                Object {
                  "size": 35,
                }
              }
            >
              <styled.button
                id="clap"
                isHover={false}
                onClick={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
              >
                <SvgIconClap
                  className="ColoredIcon"
                  id="clap-icon"
                  isClicked={undefined}
                />
                <styled.span
                  id="clap-count"
                >
                  +1
                </styled.span>
                <styled.span
                  id="clap-count-total"
                >
                  0
                </styled.span>
              </styled.button>
            </ThemeProvider>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Clap for This Wonderful Service:",
          },
          "ref": null,
          "rendered": "Clap for This Wonderful Service:",
          "type": "h4",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <ThemeProvider
              theme={
                Object {
                  "size": 35,
                }
              }
            >
              <styled.button
                id="clap"
                isHover={false}
                onClick={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
              >
                <SvgIconClap
                  className="ColoredIcon"
                  id="clap-icon"
                  isClicked={undefined}
                />
                <styled.span
                  id="clap-count"
                >
                  +1
                </styled.span>
                <styled.span
                  id="clap-count-total"
                >
                  0
                </styled.span>
              </styled.button>
            </ThemeProvider>,
            "className": "Clap",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <styled.button
                id="clap"
                isHover={false}
                onClick={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
              >
                <SvgIconClap
                  className="ColoredIcon"
                  id="clap-icon"
                  isClicked={undefined}
                />
                <styled.span
                  id="clap-count"
                >
                  +1
                </styled.span>
                <styled.span
                  id="clap-count-total"
                >
                  0
                </styled.span>
              </styled.button>,
              "theme": Object {
                "size": 35,
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <SvgIconClap
                    className="ColoredIcon"
                    id="clap-icon"
                    isClicked={undefined}
                  />,
                  <styled.span
                    id="clap-count"
                  >
                    +1
                  </styled.span>,
                  <styled.span
                    id="clap-count-total"
                  >
                    0
                  </styled.span>,
                ],
                "id": "clap",
                "isHover": false,
                "onClick": [Function],
                "onMouseEnter": [Function],
                "onMouseLeave": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "className": "ColoredIcon",
                    "id": "clap-icon",
                    "isClicked": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "+1",
                    "id": "clap-count",
                  },
                  "ref": null,
                  "rendered": "+1",
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "0",
                    "id": "clap-count-total",
                  },
                  "ref": null,
                  "rendered": "0",
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "div",
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div>
          <h4>
            Clap for This Wonderful Service:
          </h4>
          <br />
          <div
            className="Clap"
          >
            <ThemeProvider
              theme={
                Object {
                  "size": 35,
                }
              }
            >
              <styled.button
                id="clap"
                isHover={false}
                onClick={[Function]}
                onMouseEnter={[Function]}
                onMouseLeave={[Function]}
              >
                <SvgIconClap
                  className="ColoredIcon"
                  id="clap-icon"
                  isClicked={undefined}
                />
                <styled.span
                  id="clap-count"
                >
                  +1
                </styled.span>
                <styled.span
                  id="clap-count-total"
                >
                  0
                </styled.span>
              </styled.button>
            </ThemeProvider>
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h4>
              Clap for This Wonderful Service:
            </h4>,
            <br />,
            <div
              className="Clap"
            >
              <ThemeProvider
                theme={
                  Object {
                    "size": 35,
                  }
                }
              >
                <styled.button
                  id="clap"
                  isHover={false}
                  onClick={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                >
                  <SvgIconClap
                    className="ColoredIcon"
                    id="clap-icon"
                    isClicked={undefined}
                  />
                  <styled.span
                    id="clap-count"
                  >
                    +1
                  </styled.span>
                  <styled.span
                    id="clap-count-total"
                  >
                    0
                  </styled.span>
                </styled.button>
              </ThemeProvider>
            </div>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Clap for This Wonderful Service:",
            },
            "ref": null,
            "rendered": "Clap for This Wonderful Service:",
            "type": "h4",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": "br",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <ThemeProvider
                theme={
                  Object {
                    "size": 35,
                  }
                }
              >
                <styled.button
                  id="clap"
                  isHover={false}
                  onClick={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                >
                  <SvgIconClap
                    className="ColoredIcon"
                    id="clap-icon"
                    isClicked={undefined}
                  />
                  <styled.span
                    id="clap-count"
                  >
                    +1
                  </styled.span>
                  <styled.span
                    id="clap-count-total"
                  >
                    0
                  </styled.span>
                </styled.button>
              </ThemeProvider>,
              "className": "Clap",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <styled.button
                  id="clap"
                  isHover={false}
                  onClick={[Function]}
                  onMouseEnter={[Function]}
                  onMouseLeave={[Function]}
                >
                  <SvgIconClap
                    className="ColoredIcon"
                    id="clap-icon"
                    isClicked={undefined}
                  />
                  <styled.span
                    id="clap-count"
                  >
                    +1
                  </styled.span>
                  <styled.span
                    id="clap-count-total"
                  >
                    0
                  </styled.span>
                </styled.button>,
                "theme": Object {
                  "size": 35,
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <SvgIconClap
                      className="ColoredIcon"
                      id="clap-icon"
                      isClicked={undefined}
                    />,
                    <styled.span
                      id="clap-count"
                    >
                      +1
                    </styled.span>,
                    <styled.span
                      id="clap-count-total"
                    >
                      0
                    </styled.span>,
                  ],
                  "id": "clap",
                  "isHover": false,
                  "onClick": [Function],
                  "onMouseEnter": [Function],
                  "onMouseLeave": [Function],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "className": "ColoredIcon",
                      "id": "clap-icon",
                      "isClicked": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "+1",
                      "id": "clap-count",
                    },
                    "ref": null,
                    "rendered": "+1",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "0",
                      "id": "clap-count-total",
                    },
                    "ref": null,
                    "rendered": "0",
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Unit tests LeaderboardListItem renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LeaderboardListItem
    data={
      Object {
        "claps": 100,
        "serviceName": "test service",
        "slug": "111-test-service",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        undefined,
        100,
        "test service",
      ],
    },
    "ref": null,
    "rendered": Array [
      undefined,
      100,
      "test service",
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          undefined,
          100,
          "test service",
        ],
      },
      "ref": null,
      "rendered": Array [
        undefined,
        100,
        "test service",
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Unit tests LeaderboardPage renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LeaderboardPage
    params={
      Object {
        "slug": "leaderboard",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <AppBar
          onBackTouchTap={[Function]}
          title="Leaderboard"
        />,
        <LeaderboardPane />,
      ],
      "className": "LeaderboardPage",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "onBackTouchTap": [Function],
          "title": "Leaderboard",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <AppBar
            onBackTouchTap={[Function]}
            title="Leaderboard"
          />,
          <LeaderboardPane />,
        ],
        "className": "LeaderboardPage",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "onBackTouchTap": [Function],
            "title": "Leaderboard",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;

exports[`Unit tests LeaderboardPane renders correctly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LeaderboardPane />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <HeaderBar
          alternateBackgroundColor={false}
          bannerName="housing"
          primaryText="Leaderboard"
          secondaryText={null}
        />,
        Array [
          <LeaderboardListItem
            data={
              Object {
                "claps": 400,
                "serviceName": "Fake Service: 0",
                "slug": "111-my-housing-service",
              }
            }
            index={0}
          />,
          <LeaderboardListItem
            data={
              Object {
                "claps": 390,
                "serviceName": "Fake Service: 1",
                "slug": "111-my-housing-service",
              }
            }
            index={1}
          />,
          <LeaderboardListItem
            data={
              Object {
                "claps": 380,
                "serviceName": "Fake Service: 2",
                "slug": "111-my-housing-service",
              }
            }
            index={2}
          />,
          <LeaderboardListItem
            data={
              Object {
                "claps": 370,
                "serviceName": "Fake Service: 3",
                "slug": "111-my-housing-service",
              }
            }
            index={3}
          />,
          <LeaderboardListItem
            data={
              Object {
                "claps": 360,
                "serviceName": "Fake Service: 4",
                "slug": "111-my-housing-service",
              }
            }
            index={4}
          />,
          <LeaderboardListItem
            data={
              Object {
                "claps": 350,
                "serviceName": "Fake Service: 5",
                "slug": "111-my-housing-service",
              }
            }
            index={5}
          />,
        ],
      ],
      "className": "LeaderboardPane",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "alternateBackgroundColor": false,
          "bannerName": "housing",
          "primaryText": "Leaderboard",
          "secondaryText": null,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "data": Object {
            "claps": 400,
            "serviceName": "Fake Service: 0",
            "slug": "111-my-housing-service",
          },
          "index": 0,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "data": Object {
            "claps": 390,
            "serviceName": "Fake Service: 1",
            "slug": "111-my-housing-service",
          },
          "index": 1,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "data": Object {
            "claps": 380,
            "serviceName": "Fake Service: 2",
            "slug": "111-my-housing-service",
          },
          "index": 2,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "data": Object {
            "claps": 370,
            "serviceName": "Fake Service: 3",
            "slug": "111-my-housing-service",
          },
          "index": 3,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "data": Object {
            "claps": 360,
            "serviceName": "Fake Service: 4",
            "slug": "111-my-housing-service",
          },
          "index": 4,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "data": Object {
            "claps": 350,
            "serviceName": "Fake Service: 5",
            "slug": "111-my-housing-service",
          },
          "index": 5,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <HeaderBar
            alternateBackgroundColor={false}
            bannerName="housing"
            primaryText="Leaderboard"
            secondaryText={null}
          />,
          Array [
            <LeaderboardListItem
              data={
                Object {
                  "claps": 400,
                  "serviceName": "Fake Service: 0",
                  "slug": "111-my-housing-service",
                }
              }
              index={0}
            />,
            <LeaderboardListItem
              data={
                Object {
                  "claps": 390,
                  "serviceName": "Fake Service: 1",
                  "slug": "111-my-housing-service",
                }
              }
              index={1}
            />,
            <LeaderboardListItem
              data={
                Object {
                  "claps": 380,
                  "serviceName": "Fake Service: 2",
                  "slug": "111-my-housing-service",
                }
              }
              index={2}
            />,
            <LeaderboardListItem
              data={
                Object {
                  "claps": 370,
                  "serviceName": "Fake Service: 3",
                  "slug": "111-my-housing-service",
                }
              }
              index={3}
            />,
            <LeaderboardListItem
              data={
                Object {
                  "claps": 360,
                  "serviceName": "Fake Service: 4",
                  "slug": "111-my-housing-service",
                }
              }
              index={4}
            />,
            <LeaderboardListItem
              data={
                Object {
                  "claps": 350,
                  "serviceName": "Fake Service: 5",
                  "slug": "111-my-housing-service",
                }
              }
              index={5}
            />,
          ],
        ],
        "className": "LeaderboardPane",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "alternateBackgroundColor": false,
            "bannerName": "housing",
            "primaryText": "Leaderboard",
            "secondaryText": null,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "data": Object {
              "claps": 400,
              "serviceName": "Fake Service: 0",
              "slug": "111-my-housing-service",
            },
            "index": 0,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "data": Object {
              "claps": 390,
              "serviceName": "Fake Service: 1",
              "slug": "111-my-housing-service",
            },
            "index": 1,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "data": Object {
              "claps": 380,
              "serviceName": "Fake Service: 2",
              "slug": "111-my-housing-service",
            },
            "index": 2,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "data": Object {
              "claps": 370,
              "serviceName": "Fake Service: 3",
              "slug": "111-my-housing-service",
            },
            "index": 3,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "data": Object {
              "claps": 360,
              "serviceName": "Fake Service: 4",
              "slug": "111-my-housing-service",
            },
            "index": 4,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "data": Object {
              "claps": 350,
              "serviceName": "Fake Service: 5",
              "slug": "111-my-housing-service",
            },
            "index": 5,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactFifteenAdapter {
      "options": Object {
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "prevContext": true,
          },
        },
        "supportPrevContextArgumentOfComponentDidUpdate": true,
      },
    },
  },
}
`;
